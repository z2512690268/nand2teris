//class SquareGame  { 
//    field Square square ; 
//    field int direction ;  
//    constructor SquareGame new (  )   { 
//        let square  =  Square . new ( 0 ,  0 ,  30 )  ; 
function SquareGame.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 0
push constant 0
push constant 30
call Square.new 3
pop this 0
//        let direction  =  0 ; 
push constant 0
pop this 1
//        return this ; 
push pointer 0
return
//     } 
//    method void dispose (  )   { 
//        do square . dispose (  )  ; 
function SquareGame.dispose 0
push argument 0
pop pointer 0
push this 0
call Square.dispose 1
pop temp 0
//        do Memory . deAlloc ( this )  ; 
push pointer 0
call Memory.deAlloc 1
pop temp 0
//        return ; 
push constant 0
return
//     } 
//    method void run (  )   { 
//        var char key ; 
//        var boolean exit ; 
//        let exit  =  false ; 
function SquareGame.run 2
push argument 0
pop pointer 0
push constant 0
pop local 1
//        while  (  ~ exit )   { 
label WHILE_EXP0
push local 1
not
not
//            while  ( key  =  0 )   { 
if-goto WHILE_END0
label WHILE_EXP1
push local 0
push constant 0
eq
not
//                let key  =  Keyboard . keyPressed (  )  ; 
if-goto WHILE_END1
call Keyboard.keyPressed 0
pop local 0
//                do moveSquare (  )  ; 
push pointer 0
call SquareGame.moveSquare 1
pop temp 0
//             } 
goto WHILE_EXP1
label WHILE_END1
//            if  ( key  =  81 )   { 
push local 0
push constant 81
eq
//                let exit  =  true ; 
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop local 1
//             } 
//            if  ( key  =  90 )   { 
label IF_FALSE0
push local 0
push constant 90
eq
//                do square . decSize (  )  ; 
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 0
call Square.decSize 1
pop temp 0
//             } 
//            if  ( key  =  88 )   { 
label IF_FALSE1
push local 0
push constant 88
eq
//                do square . incSize (  )  ; 
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 0
call Square.incSize 1
pop temp 0
//             } 
//            if  ( key  =  131 )   { 
label IF_FALSE2
push local 0
push constant 131
eq
//                let direction  =  1 ; 
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
pop this 1
//             } 
//            if  ( key  =  133 )   { 
label IF_FALSE3
push local 0
push constant 133
eq
//                let direction  =  2 ; 
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 2
pop this 1
//             } 
//            if  ( key  =  130 )   { 
label IF_FALSE4
push local 0
push constant 130
eq
//                let direction  =  3 ; 
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 3
pop this 1
//             } 
//            if  ( key  =  132 )   { 
label IF_FALSE5
push local 0
push constant 132
eq
//                let direction  =  4 ; 
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 4
pop this 1
//             } 
//            while  (  ~  ( key  =  0 )  )   { 
label IF_FALSE6
label WHILE_EXP2
push local 0
push constant 0
eq
not
not
//                let key  =  Keyboard . keyPressed (  )  ; 
if-goto WHILE_END2
call Keyboard.keyPressed 0
pop local 0
//                do moveSquare (  )  ; 
push pointer 0
call SquareGame.moveSquare 1
pop temp 0
//             } 
goto WHILE_EXP2
label WHILE_END2
//         } 
goto WHILE_EXP0
label WHILE_END0
//        return ; 
push constant 0
return
//	 } 
//    method void moveSquare (  )   { 
//        if  ( direction  =  1 )   { 
function SquareGame.moveSquare 0
push argument 0
pop pointer 0
push this 1
push constant 1
eq
//            do square . moveUp (  )  ; 
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push this 0
call Square.moveUp 1
pop temp 0
//         } 
//        if  ( direction  =  2 )   { 
label IF_FALSE7
push this 1
push constant 2
eq
//            do square . moveDown (  )  ; 
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push this 0
call Square.moveDown 1
pop temp 0
//         } 
//        if  ( direction  =  3 )   { 
label IF_FALSE8
push this 1
push constant 3
eq
//            do square . moveLeft (  )  ; 
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push this 0
call Square.moveLeft 1
pop temp 0
//         } 
//        if  ( direction  =  4 )   { 
label IF_FALSE9
push this 1
push constant 4
eq
//            do square . moveRight (  )  ; 
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push this 0
call Square.moveRight 1
pop temp 0
//         } 
//        do Sys . wait ( 5 )  ;  
label IF_FALSE10
push constant 5
call Sys.wait 1
pop temp 0
//        return ; 
push constant 0
return
//     } 
// } 
