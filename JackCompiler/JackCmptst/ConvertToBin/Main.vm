//class Main  { 
//    function void main (  )   { 
//	var int result ,  value ; 
//        do Main . fillMemory ( 8001 ,  16 ,   - 1 )  ;  
function Main.main 2
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
pop temp 0
//        let value  =  Memory . peek ( 8000 )  ;     
push constant 8000
call Memory.peek 1
pop local 1
//	do Main . convert ( value )  ;            
push local 1
call Main.convert 1
pop temp 0
//    	return ; 
push constant 0
return
//     } 
//    function void convert ( int value )   { 
//    	var int mask ,  position ; 
//    	var boolean loop ; 
//    	let loop  =  true ; 
function Main.convert 3
push constant 1
neg
pop local 2
//    	while  ( loop )   { 
label WHILE_EXP0
push local 2
not
//    	    let position  =  position  +  1 ; 
if-goto WHILE_END0
push local 1
push constant 1
add
pop local 1
//    	    let mask  =  Main . nextMask ( mask )  ; 
push local 0
call Main.nextMask 1
pop local 0
//            do Memory . poke ( 9000  +  position ,  mask )  ; 
push constant 9000
push local 1
add
push local 0
call Memory.poke 2
pop temp 0
//    	    if  (  ~  ( position  >  16 )  )   { 
push local 1
push constant 16
gt
not
//    	        if  (  ~  (  ( value  &  mask )   =  0 )  )   { 
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push local 0
and
push constant 0
eq
not
//    	            do Memory . poke ( 8000  +  position ,  1 )  ; 
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
pop temp 0
//       	         } 
//    	        else  { 
goto IF_END1
label IF_FALSE1
//    	            do Memory . poke ( 8000  +  position ,  0 )  ; 
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
pop temp 0
//      	         }     
label IF_END1
//    	     } 
//    	    else  { 
goto IF_END0
label IF_FALSE0
//    	        let loop  =  false ; 
push constant 0
pop local 2
//    	     } 
label IF_END0
//    	 } 
goto WHILE_EXP0
label WHILE_END0
//    	return ; 
push constant 0
return
//     } 
//    function int nextMask ( int mask )   { 
//    	if  ( mask  =  0 )   { 
function Main.nextMask 0
push argument 0
push constant 0
eq
//    	    return 1 ; 
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
return
//    	 } 
//    	else  { 
goto IF_END2
label IF_FALSE2
//	    return mask  *  2 ; 
push argument 0
push constant 2
call Math.multiply 2
return
//    	 } 
label IF_END2
//     } 
//    function void fillMemory ( int startAddress ,  int length ,  int value )   { 
//        while  ( length  >  0 )   { 
function Main.fillMemory 0
label WHILE_EXP1
push argument 1
push constant 0
gt
not
//            do Memory . poke ( startAddress ,  value )  ; 
if-goto WHILE_END1
push argument 0
push argument 2
call Memory.poke 2
pop temp 0
//            let length  =  length  -  1 ; 
push argument 1
push constant 1
sub
pop argument 1
//            let startAddress  =  startAddress  +  1 ; 
push argument 0
push constant 1
add
pop argument 0
//         } 
goto WHILE_EXP1
label WHILE_END1
//        return ; 
push constant 0
return
//     } 
// } 
