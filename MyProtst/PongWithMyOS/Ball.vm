//class Ball  { 
//    field int x ,  y ; 
//    field int lengthx ,  lengthy ; 
//    field int d ,  straightD ,  diagonalD ; 
//    field boolean invert ,  positivex ,  positivey ; 
//    field int leftWall ,  rightWall ,  topWall ,  bottomWall ; 
//    field int wall ; 
//    constructor Ball new ( int Ax ,  int Ay ,  int AleftWall ,  int ArightWall ,  int AtopWall ,  int AbottomWall )   {     	
//	let x  =  Ax ; 		
function Ball.new 0
push constant 15
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
//	let y  =  Ay ; 
push argument 1
pop this 1
//	let leftWall  =  AleftWall ; 
push argument 2
pop this 10
//	let rightWall  =  ArightWall  -  6 ;  
push argument 3
push constant 6
sub
pop this 11
//	let topWall  =  AtopWall ;  
push argument 4
pop this 12
//	let bottomWall  =  AbottomWall  -  6 ;  
push argument 5
push constant 6
sub
pop this 13
//	let wall  =  0 ; 
push constant 0
pop this 14
//        do show (  )  ; 
push pointer 0
call Ball.show 1
pop temp 0
//        return this ; 
push pointer 0
return
//     } 
//    method void dispose (  )   { 
//        do Memory . deAlloc ( this )  ; 
function Ball.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
//        return ; 
push constant 0
return
//     } 
//    method void show (  )   { 
//        do Screen . setColor ( true )  ; 
function Ball.show 0
push argument 0
pop pointer 0
push constant 1
neg
call Screen.setColor 1
pop temp 0
//	do draw (  )  ; 
push pointer 0
call Ball.draw 1
pop temp 0
//        return ; 
push constant 0
return
//     } 
//    method void hide (  )   { 
//        do Screen . setColor ( false )  ; 
function Ball.hide 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
//	do draw (  )  ; 
push pointer 0
call Ball.draw 1
pop temp 0
//        return ; 
push constant 0
return
//     } 
//    method void draw (  )   { 
//	do Screen . drawRectangle ( x ,  y ,  x  +  5 ,  y  +  5 )  ; 
function Ball.draw 0
push argument 0
pop pointer 0
push this 0
push this 1
push this 0
push constant 5
add
push this 1
push constant 5
add
call Screen.drawRectangle 4
pop temp 0
//	return ; 
push constant 0
return
//     } 
//    method int getLeft (  )   { 
//        return x ; 
function Ball.getLeft 0
push argument 0
pop pointer 0
push this 0
return
//     } 
//    method int getRight (  )   { 
//        return x  +  5 ; 
function Ball.getRight 0
push argument 0
pop pointer 0
push this 0
push constant 5
add
return
//     } 
//    method void setDestination ( int destx ,  int desty )   { 
//        var int dx ,  dy ,  temp ; 
//	let lengthx  =  destx  -  x ; 
function Ball.setDestination 3
push argument 0
pop pointer 0
push argument 1
push this 0
sub
pop this 2
//	let lengthy  =  desty  -  y ; 
push argument 2
push this 1
sub
pop this 3
//        let dx  =  Math . abs ( lengthx )  ; 
push this 2
call Math.abs 1
pop local 0
//        let dy  =  Math . abs ( lengthy )  ; 
push this 3
call Math.abs 1
pop local 1
//        let invert  =   ( dx  <  dy )  ; 
push local 0
push local 1
lt
pop this 7
//        if  ( invert )   { 
push this 7
//            let temp  =  dx ;  
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
pop local 2
//            let dx  =  dy ; 
push local 1
pop local 0
//            let dy  =  temp ; 
push local 2
pop local 1
//   	    let positivex  =   ( y  <  desty )  ; 
push this 1
push argument 2
lt
pop this 8
//            let positivey  =   ( x  <  destx )  ; 
push this 0
push argument 1
lt
pop this 9
//         } 
//        else  { 
goto IF_END0
label IF_FALSE0
//	    let positivex  =   ( x  <  destx )  ; 
push this 0
push argument 1
lt
pop this 8
//            let positivey  =   ( y  <  desty )  ; 
push this 1
push argument 2
lt
pop this 9
//         } 
label IF_END0
//        let d  =   ( 2  *  dy )   -  dx ; 
push constant 2
push local 1
call Math.multiply 2
push local 0
sub
pop this 4
//        let straightD  =  2  *  dy ; 
push constant 2
push local 1
call Math.multiply 2
pop this 5
//        let diagonalD  =  2  *   ( dy  -  dx )  ; 
push constant 2
push local 1
push local 0
sub
call Math.multiply 2
pop this 6
//	return ; 
push constant 0
return
//     } 
//    method int move (  )   { 
//	do hide (  )  ; 
function Ball.move 0
push argument 0
pop pointer 0
push pointer 0
call Ball.hide 1
pop temp 0
//        if  ( d  <  0 )   { 
push this 4
push constant 0
lt
//            let d  =  d  +  straightD ; 
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 4
push this 5
add
pop this 4
//         } 
//        else  { 
goto IF_END1
label IF_FALSE1
//            let d  =  d  +  diagonalD ; 
push this 4
push this 6
add
pop this 4
//            if  ( positivey )   { 
push this 9
//         	if  ( invert )   { 
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 7
//	   	    let x  =  x  +  4 ; 
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 0
push constant 4
add
pop this 0
//    	         } 
//                else  { 
goto IF_END3
label IF_FALSE3
//		    let y  =  y  +  4 ; 
push this 1
push constant 4
add
pop this 1
//                 } 
label IF_END3
//             } 
//            else  { 
goto IF_END2
label IF_FALSE2
//         	if  ( invert )   { 
push this 7
//	   	    let x  =  x  -  4 ; 
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push this 0
push constant 4
sub
pop this 0
//    	         } 
//                else  { 
goto IF_END4
label IF_FALSE4
//		    let y  =  y  -  4 ; 
push this 1
push constant 4
sub
pop this 1
//                 } 
label IF_END4
//             } 
label IF_END2
//	 } 
label IF_END1
//        if  ( positivex )   { 
push this 8
//      	    if  ( invert )   { 
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push this 7
//	       let y  =  y  +  4 ; 
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push this 1
push constant 4
add
pop this 1
//    	     } 
//            else  { 
goto IF_END6
label IF_FALSE6
//	        let x  =  x  +  4 ; 
push this 0
push constant 4
add
pop this 0
//             } 
label IF_END6
//	 } 
//	else  { 
goto IF_END5
label IF_FALSE5
//            if  ( invert )   { 
push this 7
//	        let y  =  y  -  4 ; 
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push this 1
push constant 4
sub
pop this 1
//	     } 
//            else  { 
goto IF_END7
label IF_FALSE7
//		let x  =  x  -  4 ; 
push this 0
push constant 4
sub
pop this 0
//             } 
label IF_END7
//	 } 
label IF_END5
//	if  (  ~  ( x  >  leftWall )  )   { 
push this 0
push this 10
gt
not
//	    let wall  =  1 ;     
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 1
pop this 14
//	    let x  =  leftWall ; 
push this 10
pop this 0
//	 } 
//        if  (  ~  ( x  <  rightWall )  )   { 
label IF_FALSE8
push this 0
push this 11
lt
not
//	    let wall  =  2 ;     
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 2
pop this 14
//	    let x  =  rightWall ; 
push this 11
pop this 0
//	 } 
//        if  (  ~  ( y  >  topWall )  )   { 
label IF_FALSE9
push this 1
push this 12
gt
not
//            let wall  =  3 ;     
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 3
pop this 14
//	    let y  =  topWall ; 
push this 12
pop this 1
//         } 
//        if  (  ~  ( y  <  bottomWall )  )   { 
label IF_FALSE10
push this 1
push this 13
lt
not
//            let wall  =  4 ;     
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push constant 4
pop this 14
//	    let y  =  bottomWall ; 
push this 13
pop this 1
//         } 
//	do show (  )  ; 
label IF_FALSE11
push pointer 0
call Ball.show 1
pop temp 0
//	return wall ; 
push this 14
return
//     } 
//    method void bounce ( int bouncingDirection )   { 
//	var int newx ,  newy ,  divLengthx ,  divLengthy ,  factor ; 
//        let divLengthx  =  lengthx  /  10 ; 
function Ball.bounce 5
push argument 0
pop pointer 0
push this 2
push constant 10
call Math.divide 2
pop local 2
//        let divLengthy  =  lengthy  /  10 ; 
push this 3
push constant 10
call Math.divide 2
pop local 3
//	if  ( bouncingDirection  =  0 )   { 
push argument 1
push constant 0
eq
//	    let factor  =  10 ; 
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push constant 10
pop local 4
//	 } 
//	else  { 
goto IF_END12
label IF_FALSE12
//	    if  (  (  ~  ( lengthx  <  0 )  )   &   ( bouncingDirection  =  1 )   |   ( lengthx  <  0 )   &   ( bouncingDirection  =   (  - 1 )  )  )   { 
push this 2
push constant 0
lt
not
push argument 1
push constant 1
eq
and
push this 2
push constant 0
lt
or
push argument 1
push constant 1
neg
eq
and
//	        let factor  =  20 ;  
if-goto IF_TRUE13
goto IF_FALSE13
label IF_TRUE13
push constant 20
pop local 4
//   	     } 
//	    else  { 
goto IF_END13
label IF_FALSE13
//	        let factor  =  5 ;  
push constant 5
pop local 4
//	     } 
label IF_END13
//	 } 
label IF_END12
//	if  ( wall  =  1 )   { 
push this 14
push constant 1
eq
//	    let newx  =  506 ; 
if-goto IF_TRUE14
goto IF_FALSE14
label IF_TRUE14
push constant 506
pop local 0
//	    let newy  =   ( divLengthy  *   (  - 50 )  )   /  divLengthx ; 
push local 3
push constant 50
neg
call Math.multiply 2
push local 2
call Math.divide 2
pop local 1
//            let newy  =  y  +   ( newy  *  factor )  ; 
push this 1
push local 1
push local 4
call Math.multiply 2
add
pop local 1
//	 } 
//	else  { 
goto IF_END14
label IF_FALSE14
// 	    if  ( wall  =  2 )   { 
push this 14
push constant 2
eq
//	        let newx  =  0 ; 
if-goto IF_TRUE15
goto IF_FALSE15
label IF_TRUE15
push constant 0
pop local 0
//	        let newy  =   ( divLengthy  *  50 )   /  divLengthx ; 
push local 3
push constant 50
call Math.multiply 2
push local 2
call Math.divide 2
pop local 1
//                let newy  =  y  +   ( newy  *  factor )  ; 
push this 1
push local 1
push local 4
call Math.multiply 2
add
pop local 1
//	     } 
//	    else  { 
goto IF_END15
label IF_FALSE15
// 	        if  ( wall  =  3 )   { 
push this 14
push constant 3
eq
//		    let newy  =  250 ; 
if-goto IF_TRUE16
goto IF_FALSE16
label IF_TRUE16
push constant 250
pop local 1
//		    let newx  =   ( divLengthx  *   (  - 25 )  )   /  divLengthy ; 
push local 2
push constant 25
neg
call Math.multiply 2
push local 3
call Math.divide 2
pop local 0
//	            let newx  =  x  +   ( newx  *  factor )  ; 
push this 0
push local 0
push local 4
call Math.multiply 2
add
pop local 0
//		 } 
//	        else  {  
goto IF_END16
label IF_FALSE16
//		    let newy  =  0 ; 
push constant 0
pop local 1
//		    let newx  =   ( divLengthx  *  25 )   /  divLengthy ; 
push local 2
push constant 25
call Math.multiply 2
push local 3
call Math.divide 2
pop local 0
//	            let newx  =  x  +   ( newx  *  factor )  ; 
push this 0
push local 0
push local 4
call Math.multiply 2
add
pop local 0
//		 } 
label IF_END16
//	     } 
label IF_END15
//	 } 
label IF_END14
//	do setDestination ( newx ,  newy )  ; 
push pointer 0
push local 0
push local 1
call Ball.setDestination 3
pop temp 0
//	return ; 
push constant 0
return
//     } 
// } 
