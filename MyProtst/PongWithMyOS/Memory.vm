//class Memory  { 
//    static int HeapBase ;  
//    function void init (  )   { 
//        let HeapBase  =  0 ; 
function Memory.init 0
push constant 0
pop static 0
//        let HeapBase [ 2048 ]   =  14336 ; 
push static 0
push constant 2048
add
pop temp 1
push constant 14336
push temp 1
pop pointer 1
pop that 0
//        let HeapBase [ 2049 ]   =  16384 ; 
push static 0
push constant 2049
add
pop temp 1
push constant 16384
push temp 1
pop pointer 1
pop that 0
//        return ; 
push constant 0
return
//     } 
//    function int peek ( int address )   { 
//        return HeapBase [ address ]  ; 
function Memory.peek 0
push static 0
push argument 0
add
pop pointer 1
push that 0
return
//     } 
//    function void poke ( int address ,  int value )   { 
//        let HeapBase [ address ]   =  value ; 
function Memory.poke 0
push static 0
push argument 0
add
pop temp 1
push argument 1
push temp 1
pop pointer 1
pop that 0
//        return ; 
push constant 0
return
//     } 
//    function int alloc ( int size )   { 
//		var int freeList ; 
//		if ( size  <  1 )  { 
function Memory.alloc 1
push argument 0
push constant 1
lt
//			do Sys . error ( 4 )  ; 
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
call Sys.error 1
pop temp 0
//		 } 
//		let freeList  =  2048 ; 
label IF_FALSE0
push constant 2048
pop local 0
//		while ( freeList [ 0 ]   <   ( size  +  5 )  )  { 
label WHILE_EXP0
push local 0
push constant 0
add
pop pointer 1
push that 0
push argument 0
push constant 5
add
lt
not
//			let freeList  =  freeList [ 1 ]  ; 
if-goto WHILE_END0
push local 0
push constant 1
add
pop pointer 1
push that 0
pop local 0
//			if ( freeList [ 0 ]   =   ( size  +  3 )  )  { 
push local 0
push constant 0
add
pop pointer 1
push that 0
push argument 0
push constant 3
add
eq
//				let freeList [ 0 ]   =  freeList [ 0 ]   -  size  -  1 ; 
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 0
add
pop temp 1
push local 0
push constant 0
add
pop pointer 1
push that 0
push argument 0
sub
push constant 1
sub
push temp 1
pop pointer 1
pop that 0
//				let freeList [ 2 ]   =  size  +  1 ; 
push local 0
push constant 2
add
pop temp 1
push argument 0
push constant 1
add
push temp 1
pop pointer 1
pop that 0
//				return freeList  +  3 ; 
push local 0
push constant 3
add
return
//			 } 
//		 } 
label IF_FALSE1
goto WHILE_EXP0
label WHILE_END0
//		if ( freeList [ 1 ]   =  null )  { 
push local 0
push constant 1
add
pop pointer 1
push that 0
push constant 0
eq
//			do Sys . error ( 5 )  ; 
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 5
call Sys.error 1
pop temp 0
//		 } 
//		let freeList [ size  +  3 ]   =  freeList [ 0 ]   -  size  -  3 ; 
label IF_FALSE2
push local 0
push argument 0
push constant 3
add
add
pop temp 1
push local 0
push constant 0
add
pop pointer 1
push that 0
push argument 0
sub
push constant 3
sub
push temp 1
pop pointer 1
pop that 0
//		let freeList [ size  +  4 ]   =  freeList [ 1 ]  ; 
push local 0
push argument 0
push constant 4
add
add
pop temp 1
push local 0
push constant 1
add
pop pointer 1
push that 0
push temp 1
pop pointer 1
pop that 0
//		let freeList [ 0 ]   =  2 ; 
push local 0
push constant 0
add
pop temp 1
push constant 2
push temp 1
pop pointer 1
pop that 0
//		let freeList [ 1 ]   =  freeList  +  size  +  3 ; 
push local 0
push constant 1
add
pop temp 1
push local 0
push argument 0
add
push constant 3
add
push temp 1
pop pointer 1
pop that 0
//		let freeList [ 2 ]   =  size  +  1 ; 
push local 0
push constant 2
add
pop temp 1
push argument 0
push constant 1
add
push temp 1
pop pointer 1
pop that 0
//		return freeList  +  3 ; 
push local 0
push constant 3
add
return
//     } 
//    function void deAlloc ( int object )   { 
//    	var int freeList ; 
//    	let freeList  =  2048 ; 
function Memory.deAlloc 1
push constant 2048
pop local 0
//    	while ( freeList [ 1 ]   <  object )  { 
label WHILE_EXP1
push local 0
push constant 1
add
pop pointer 1
push that 0
push argument 0
lt
not
//    		let freeList  =  freeList [ 1 ]  ; 
if-goto WHILE_END1
push local 0
push constant 1
add
pop pointer 1
push that 0
pop local 0
//    	 } 
goto WHILE_EXP1
label WHILE_END1
//        let freeList [ 0 ]   =  freeList [ 0 ]   +  object [  - 1 ]   +  HeapBase [ freeList [ 1 ]  ]  ; 
push local 0
push constant 0
add
pop temp 1
push local 0
push constant 0
add
pop pointer 1
push that 0
push argument 0
push constant 1
neg
add
pop pointer 1
push that 0
add
push static 0
push local 0
push constant 1
add
pop pointer 1
push that 0
add
pop pointer 1
push that 0
add
push temp 1
pop pointer 1
pop that 0
//    	let freeList [ 1 ]   =  HeapBase [ freeList [ 1 ]   +  1 ]  ; 
push local 0
push constant 1
add
pop temp 1
push static 0
push local 0
push constant 1
add
pop pointer 1
push that 0
push constant 1
add
add
pop pointer 1
push that 0
push temp 1
pop pointer 1
pop that 0
//    	return ; 
push constant 0
return
//     }     
// } 
